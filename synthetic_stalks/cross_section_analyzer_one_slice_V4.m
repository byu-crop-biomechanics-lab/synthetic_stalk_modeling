function [ results, ERR ] = cross_section_analyzer_one_slice_V4( M, i, tests, thresh, alpha )
   
%====================================================================================
% FILE:   cross_section_analyzer_one_slice.m
% AUTHOR: Douglas Cook 
% 
% PURPOSE: This function performs a geometric analysis on a single cross-sectional image.
%
%
% INPUTS: 
%         M       - a matobj (matlab.io.MatFile) providing reference to the .mat file of an individual mat file.
%         i       - the index of the slice to be analyzed    
%         tests   - a structure of tests to be performed (see below for the structure)
%         thresh  - the grayscale threshhold for identifying the stalk boundaries (between 0 and 65535 for 16-bit grayscale images)
%         alpha   - the initial or previous angle of the stalk's orientation
% 
% OUTPUT: 
%       results - a data structure containing the results of the tests - see the code for the structure of this variable.
%       ERR     - a matlab MException object containing information about the thrown error 
% 
% NOTES: The structure of the "tests" variable is given here along with the operations performed in the value of each field is "on" (one=1).
%
%         FIELD:          FUNCTION(s) CALLED:                 NOTES: 
%         'Image',        imread()                          - Essential for geometric analysis
%         'Edges',        exterior_interior_contours_R2()   - Essential   
%                          AND  
%                         avg_rind_thickness_normal_method() 
%         'Ellipse',      fit_ellipse_R2()
%         'Reorder',      reorder()
%         'RindProfile',  rind_profile()        
%         'Geometry',     geometric_calculations_R3()
%         'Plot',         lines of code for plotting the image and interior/exterior curves
% 
% RECOMMENDED VALUES OF "test" variable:
% 
%         tests = struct(     'Image',        1,  ...
%                             'Edges',        1,  ...
%                             'Outlier',      0,  ...
%                             'Ellipse',      1,  ...
%                             'Reorder',      1,  ...
%                             'Downsample',   0,  ...
%                             'RindProfile',  0,  ...
%                             'Geometry',     1,  ...
%                             'Plot',         1        );   % recommended "on" for exploratory work, "off" when running many cases in sequence.
% VERSION HISTORY
% V3 - 3/16/18   - header and comments added  
%           - Downsample and Outlier options removed to reduce the number of subroutines needed.
% V4 - 3/21/18 - the "tests" data structure was simplified to reflect the fact that:
%                       - tests.Image is required for all other analyses (so why bother with it?)
%                       - tests.Edges is required for all other analyses (so why bother with it?)
%                       - these fields are slated for removal from "tests"
%      
% 
%
%====================================================================================
    

ERR = 0;                            % initialize the ERR variable to zero

 try
                 
    %----------- REQUIRED PROCESSES ------------------------------          
    I = M.stalk(:,:,i);         % load the i_th image from M.stalk
    if tests.Edges == 1         % EDGE DETECTION - this is practically essential, as other subroutines require the interior and/or exterior data curves
        [ ext_X, ext_Y, xbar, ybar ] = exterior_boundaries_V4( I, thresh, tests.Plot );
        [rindthickness, int_X, int_Y] = avg_rind_thickness_normal_method(I, ext_X, ext_Y, 0);
    end
    %-------------------------------------------------------------
    
    
    % PLOTTING - OPTIONAL
    if tests.Plot == 1
        h = imshow((I));
        hold on
        plot(ext_X,ext_Y,'y');
        plot(int_X,int_Y,'y');
        pause(0.05)
    else
        h = 0;
    end

    % ELLIPSE - OPTIONAL
    if tests.Ellipse == 1
        [alpha, major, minor, xbar_e, ybar_e ] = fit_ellipse_R2( ext_X, ext_Y, alpha, h);
    end


    % REORDERING BASED ON ALPHA 
    if tests.Reorder == 1
        [ext_X, ext_Y, ext_x, ext_y, ext_r, ext_t, ext_xp, ext_yp, ext_rp, ext_tp, ...
            ] = reorder_V2(ext_X, ext_Y, alpha);
    end


    % RIND PROFILE
    if tests.RindProfile == 1
        [mean_profile, location] = rind_profile(I, ext_X, ext_Y, thresh, 80);
    end

    % GEOMETRY FEATURES
    if tests.Geometry == 1
        [min_diam, maj_diam, Atot, Arind, Apith, Ae, A_overlap, ecc, rsq_r, Iia, Iib, Iira, Iirb, Iga, Igb, Igra, Igrb, avg_intensity, avg_rind_intensity, avg_pith_intensity] = geometric_calculations_R3(I, ext_X, ext_Y, ext_x, ext_y, int_X, int_Y, xbar, ybar, ext_r, ext_t, major, minor, alpha);

    end


    results = struct(   'xbar',                 xbar,       ...
                        'ybar',                 ybar,       ...
                        'rind_thickness',       rindthickness,       ...
                        'alpha',                alpha,       ...
                        'min_diam',             min_diam,      ...
                        'maj_diam',             maj_diam,      ...
                        'Atot',                 Atot,      ...
                        'Arind',                Arind,      ...
                        'Apith',                Apith,      ...
                        'ecc',                  ecc,           ...
                        'Iia',                  Iia,           ...
                        'Iib',                  Iib,           ...
                        'Iira',                 Iira,           ...
                        'Iirb',                 Iirb,           ...
                        'Iga',                  Iga,           ...
                        'Igb',                  Igb,           ...
                        'Igra',                 Igra,           ...
                        'Igrb',                 Igrb,           ...
                        'avg_intensity',        avg_intensity, ...           
                        'avg_rind_intensity',   avg_rind_intensity, ...   
                        'avg_pith_intensity',   avg_pith_intensity  );


catch ERR
    displayError(ERR)
    results = struct(    'xbar',                NaN,      ...
                        'ybar',                 NaN,      ...
                        'rind_thickness',       NaN,      ...
                        'alpha',                NaN,      ...
                        'min_diam',             NaN,      ...
                        'maj_diam',             NaN,      ...
                        'Atot',                 NaN,      ...
                        'Arind',                NaN,      ...
                        'Apith',                NaN,      ...
                        'ecc',                  NaN,      ...
                        'Iia',                  NaN,      ...
                        'Iib',                  NaN,      ...
                        'Iira',                 NaN,      ...
                        'Iirb',                 NaN,      ...
                        'Iga',                  NaN,      ...
                        'Igb',                  NaN,      ...
                        'Igra',                 NaN,      ...
                        'Igrb',                 NaN,      ...
                        'avg_intensity',        NaN,      ...           
                        'avg_rind_intensity',   NaN,      ...   
                        'avg_pith_intensity',   NaN          );

end


end
    

